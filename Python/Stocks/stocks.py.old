import os
import pandas as pd
from pandas_datareader import data as web   # Package and modules for importing data; this code may change depending on pandas version
import datetime
from sklearn.linear_model import LinearRegression
import numpy as np
# from keras.layers.core import Dense, Activation, Dropout
# from keras.layers.recurrent import LSTM
# from keras.models import Sequential
# import time

# # Build model
# model = Sequential()
# model.add(LSTM(input_shape=(None, 1), units=50, return_sequences=True))
# model.add(Dropout(0.2))
# model.add(LSTM(100, return_sequences=False))
# model.add(Dropout(0.2))
# model.add(Dense(units=1))
# model.add(Activation('linear'))
# model.compile(loss='mse', optimizer='rmsprop')

linreg = LinearRegression()

def evaulateForBuy(ticker):
    # First argument is the series we want, second is the source ("yahoo" for Yahoo! Finance), third is the start date, fourth is the end date
    try:
        stock = web.DataReader(ticker, "yahoo", start, end)
        type(stock)
        # file = open('./data/' + ticker + '.txt', 'w')
        # print('Ticker: ', ticker, '\n', stock['Adj Close'].values, file=file)
        close = stock['Adj Close'].values[-10:]
        x = np.arange(1, len(close) + 1).reshape(-1, 1)
        linreg.fit(x, close)
        # pred = linreg.predict(np.arange(len(close) + 1, len(close) + 51).reshape(-1, 1))
        # print(pred)

        if (linreg.coef_ > 0):
            return True

        # x = np.reshape(x, (x.shape[0], 1, x.shape[1]))
        # model.fit(x, close, batch_size=len(close), epochs=1, validation_split=0.05)

    except Exception as e:
        pass
        # print('An error occured with ticker=' + ticker)
        # print(e)

    return False

if __name__ == '__main__':
    # We will look at stock prices starting at January 1, 2000
    start = datetime.datetime(2000, 1, 1)
    end = datetime.date.today()

    # Collecting stock tickers we are interested in
    t = web.get_nasdaq_symbols()
    t = t[t['Financial Status'] == 'N']
    t = t[t['Listing Exchange'] == 'Q']
    t = t[t['Test Issue'] == False]
    tickers = t.index.values

    if (not os.path.exists('./data')):
        os.makedirs('./data')

    for ticker in tickers:
        print(evaulate(ticker) + ' ' + ticker)












# print(apple.head(20))

# print(apple)


# import matplotlib.pyplot as plt
# from matplotlib.dates import date2num
# from matplotlib.dates import DateFormatter, WeekdayLocator,\
#     DayLocator, MONDAY
# from mpl_finance import candlestick_ohlc
#
# def pandas_candlestick_ohlc(dat, stick = "day", otherseries = None):
#     """
#     :param dat: pandas DataFrame object with datetime64 index, and float columns "Open", "High", "Low", and "Close", likely created via DataReader from "yahoo"
#     :param stick: A string or number indicating the period of time covered by a single candlestick. Valid string inputs include "day", "week", "month", and "year", ("day" default), and any numeric input indicates the number of trading days included in a period
#     :param otherseries: An iterable that will be coerced into a list, containing the columns of dat that hold other series to be plotted as lines
#
#     This will show a Japanese candlestick plot for stock data stored in dat, also plotting other series if passed.
#     """
#     mondays = WeekdayLocator(MONDAY)        # major ticks on the mondays
#     alldays = DayLocator()              # minor ticks on the days
#     dayFormatter = DateFormatter('%d')      # e.g., 12
#
#     # Create a new DataFrame which includes OHLC data for each period specified by stick input
#     transdat = dat.loc[:,["Open", "High", "Low", "Close"]]
#     if (type(stick) == str):
#         if stick == "day":
#             plotdat = transdat
#             stick = 1 # Used for plotting
#         elif stick in ["week", "month", "year"]:
#             if stick == "week":
#                 transdat["week"] = pd.to_datetime(transdat.index).map(lambda x: x.isocalendar()[1]) # Identify weeks
#             elif stick == "month":
#                 transdat["month"] = pd.to_datetime(transdat.index).map(lambda x: x.month) # Identify months
#             transdat["year"] = pd.to_datetime(transdat.index).map(lambda x: x.isocalendar()[0]) # Identify years
#             grouped = transdat.groupby(list(set(["year",stick]))) # Group by year and other appropriate variable
#             plotdat = pd.DataFrame({"Open": [], "High": [], "Low": [], "Close": []}) # Create empty data frame containing what will be plotted
#             for name, group in grouped:
#                 plotdat = plotdat.append(pd.DataFrame({"Open": group.iloc[0,0],
#                                             "High": max(group.High),
#                                             "Low": min(group.Low),
#                                             "Close": group.iloc[-1,3]},
#                                            index = [group.index[0]]))
#             if stick == "week": stick = 5
#             elif stick == "month": stick = 30
#             elif stick == "year": stick = 365
#
#     elif (type(stick) == int and stick >= 1):
#         transdat["stick"] = [np.floor(i / stick) for i in range(len(transdat.index))]
#         grouped = transdat.groupby("stick")
#         plotdat = pd.DataFrame({"Open": [], "High": [], "Low": [], "Close": []}) # Create empty data frame containing what will be plotted
#         for name, group in grouped:
#             plotdat = plotdat.append(pd.DataFrame({"Open": group.iloc[0,0],
#                                         "High": max(group.High),
#                                         "Low": min(group.Low),
#                                         "Close": group.iloc[-1,3]},
#                                        index = [group.index[0]]))
#
#     else:
#         raise ValueError('Valid inputs to argument "stick" include the strings "day", "week", "month", "year", or a positive integer')
#
#
#     # Set plot parameters, including the axis object ax used for plotting
#     fig, ax = plt.subplots()
#     fig.subplots_adjust(bottom=0.2)
#     if plotdat.index[-1] - plotdat.index[0] < pd.Timedelta('730 days'):
#         weekFormatter = DateFormatter('%b %d')  # e.g., Jan 12
#         ax.xaxis.set_major_locator(mondays)
#         ax.xaxis.set_minor_locator(alldays)
#     else:
#         weekFormatter = DateFormatter('%b %d, %Y')
#     ax.xaxis.set_major_formatter(weekFormatter)
#
#     ax.grid(True)
#
#     # Create the candelstick chart
#     candlestick_ohlc(ax, list(zip(list(date2num(plotdat.index.tolist())), plotdat["Open"].tolist(), plotdat["High"].tolist(),
#                       plotdat["Low"].tolist(), plotdat["Close"].tolist())),
#                       colorup = "black", colordown = "red", width = stick * .4)
#
#     # Plot other series (such as moving averages) as lines
#     if otherseries != None:
#         if type(otherseries) != list:
#             otherseries = [otherseries]
#         dat.loc[:,otherseries].plot(ax = ax, lw = 1.3, grid = True)
#
#     ax.xaxis_date()
#     ax.autoscale_view()
#     plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')
#
#     plt.show()
#
# pandas_candlestick_ohlc(apple)
